menu "Pthread Options"
	depends on !DISABLE_PTHREAD

config PTHREAD_MUTEX_TYPES
	bool "Enable mutex types"
	default n
	---help---
		Set to enable support for recursive and errorcheck mutexes. Enables
		pthread_mutexattr_settype().

choice
	prompt "pthread mutex robustness"
	default PTHREAD_MUTEX_ROBUST if !DEFAULT_SMALL
	default PTHREAD_MUTEX_UNSAFE if DEFAULT_SMALL

config PTHREAD_MUTEX_ROBUST
	bool "Robust mutexes"
	---help---
		Support only the robust form of the NORMAL mutex.

config PTHREAD_MUTEX_UNSAFE
	bool "Traditional unsafe mutexes"
	---help---
		Support only the traditional non-robust form of the NORMAL mutex.
		You should select this option only for backward compatibility with
		software you may be porting or, perhaps, if you are trying to minimize
		footprint.

config PTHREAD_MUTEX_BOTH
	bool "Both robust and unsafe mutexes"
	---help---
		Support both forms of NORMAL mutexes.

endchoice # pthread mutex robustness

choice
	prompt "Default NORMAL mutex robustness"
	default PTHREAD_MUTEX_DEFAULT_ROBUST
	depends on PTHREAD_MUTEX_BOTH

config PTHREAD_MUTEX_DEFAULT_ROBUST
	bool "Robust default"
	---help---
		The default is robust NORMAL mutexes (non-standard)

config PTHREAD_MUTEX_DEFAULT_UNSAFE
	bool "Unsafe default"
	---help---
		The default is traditional unsafe NORMAL mutexes (standard)

endchoice # Default NORMAL mutex robustness

choice
	prompt "Default pthread mutex protocol"
	default PTHREAD_MUTEX_DEFAULT_PRIO_INHERIT

config PTHREAD_MUTEX_DEFAULT_PRIO_NONE
	bool "PTHREAD_PRIO_NONE default"
	---help---
		By default, pthread mutexes utilize PTHREAD_PRIO_NONE protocol (standard).

config PTHREAD_MUTEX_DEFAULT_PRIO_INHERIT
	bool "PTHREAD_PRIO_INHERIT default"
	depends on PRIORITY_INHERITANCE
	---help---
		By default, pthread mutexes utilize PTHREAD_PRIO_INHERIT protocol
		(POSIX non-standard but a reasonable choice for most real-time systems).

endchoice # Default pthread mutex protocol

config CANCELLATION_POINTS
	bool "Cancellation points"
	default n
	---help---
		Enable POSIX cancellation points for pthread_cancel().  If selected,
		cancellation points will also used with the task_delete() API even if
		pthreads are not enabled.

endmenu # Pthread Options
